{
	"name": "epm",
	"patterns": [
		{
			"include": "#comment"
		},
		{
			"include": "#funcname"
		},
		{
			"include": "#funcblock"
		},
		{
			"include": "#global"
		}
	],
	"repository": {
		"funcname": {
			"name": "meta.function.epm",
			"begin": "\\b((const)\\s+)?\\s*(([_a-zA-Z][0-9_a-zA-Z\\.]*[#~@\\$\\?\\&])(\\{\\}|\\[\\])?)\\s*\\(",
			"end": "=",
			"captures": {
				"2": {
					"name": "storage.type.epm"
				},
				"3": {
					"name": "entity.name.function.epm"
				}
			},
			"patterns": [{
				"include": "#storage"
			}]
		},
		"nestedfuncname": {
			"name": "meta.function.nested.epm",
			"begin": "\\b(private|public)\\s+((const)\\s+)?(([_a-zA-Z][0-9_a-zA-Z\\.]*[#~@\\$\\?\\&])(\\{\\}|\\[\\])?)\\s*\\(",
			"end": "=",
			"captures": {
				"1": {
					"name": "storage.modifier.epm"
				},
				"3": {
					"name": "storage.type.epm"
				},
				"4": {
					"name": "entity.name.function.nested.epm"
				}
			}
		},
		"funcblock": {
			"name": "meta.block.function.epm",
			"begin": "\\{",
			"end": "\\}",
			"patterns": [
				{
					"include": "#nestedfuncname"
				},
				{
					"include": "#expression"
				}
			]
		},
		"expression": {
			"patterns": [
				{
                    "include": "#exprblock"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#support"
				},
				{
					"include": "#storage"
				},
				{
					"include": "#global"
				}
			]
		},
		"exprblock": {
			"name": "meta.block.expression.epm",
			"begin": "\\{",
			"end": "\\}",
			"patterns": [
				{
                    "include": "#expression"
				}
			]
		},
		"keywords": {
			"patterns": [{
				"name": "keyword.control.epm",
				"match": "\\b(if|then|else|elseif|do|while|for|return|break|continue|try|except|finally|switch|case|default|import)(?=[^~@#\\&\\?\\$])\\b"
			},
			{
				"name": "keyword.operator.epm",
				"match": "\\b(or|and|not|OR|AND|NOT)\\b"
			},
			{
				"name": "keyword.operator.epm",
				"match": "\\s+(\\|\\||\\&\\&|\\?|:)\\s+"
			}]
		},
		"storage": {
			"name": "storage.type.epm",
			"match": "\\b(var|const)\\b"
		},
		"global": {
			"name": "storage.type.epm",
			"match": "\\b(global)\\b"
		},
		"constants": {
			"patterns": [{
				"name": "constant.language.null.epm",
				"match": "\\b(null[\\$\\?\\&~#@](\\{\\}|\\[\\])?)"
			},
			{
				"name": "constant.language.epm",
				"match": "\\b(TRUE|FALSE|PI|EPS|SECOND|MINUTE|HOUR|DAY|MAX_INTEGER|MAX_LONG|MAX_REAL|MAX_DOUBLE|MAX_DATE|MIN_INTEGER|MIN_LONG|MIN_REAL|MIN_DOUBLE|MIN_DATE|NATIVE_FORMAT|STDOUT|STDERR)(?=[^~@#\\&\\?\\$])\\b"
			}]
		},
		"support": {
			"name": "support.function.epm",
			"match": "\\b(abort|abs|acos|add_months|array_maxsize|asin|assert|assert_cmp|assert_throw|atan|atan2|avg|bcd_add|bit_and|bit_not|bit_or|bit_reset|bit_set|bit_shl|bit_shr|bit_test|bit_xor|bsearch|bytecode|bytes_total|bytes_used|call_stack|caller|ceil|char|compact|conceal|cos|count|current_date|current_time|dayofmonth|dayofweek|dayofyear|daysbetween|daysinmonth|debug|debug_off|debug_on|debug_level|decimal_point|delete|distinct|effective_date|error_message|error_number|eval|eval_cache_dump|eval_cache_maxsize|eval_cache_stats|exists|exp|expect|expect_cmp|expect_throw|first|floor|gstats|gstats_off|gstats_on|hash|hash_maxsize|hires_time|hourofday|is_array|is_blob|is_concealed|is_date|is_debug_on|is_defined|is_double|is_hash|is_integer|is_long|is_lower|is_real|is_string|is_upper|keys|length|lengthb|line|log|log10|loop_limit|lpad|ltrim|max|message_box|message_number|min|minutes|monthofyear|monthsbetween|next|nvl|ord|parse|parse_date|pop|position|positionb|print|push|reveal|reverse|round|rpad|rtrim|seconds|sin|sizeof|sleep|sort|sqrt|stack_limit|stats|stats_date|stats_off|stats_on|stats_reset|strict_on|strict_off|substr|substrb|sum|tan|to_blob|to_blob_array|to_date|to_double|to_integer|to_long|to_lower|to_objid|to_real|to_string|to_string_blob|to_time|to_upper|transfer|undefine|values|weekofyear)(?=\\s*\\()\\b"
		},
		"strings": {
			"name": "string.quoted.single.epm",
			"begin": "'",
			"end": "'",
			"patterns": [{
				"name": "constant.character.escape.epm",
				"match": "\\\\."
			}]
		},
		"comment": {
			"name": "comment.line.epm",
			"begin": "(^#|(?<![a-zA-Z0-9_])#)",
			"end": "$"
		}
	},
	"scopeName": "source.epm"
}
